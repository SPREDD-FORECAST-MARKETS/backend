// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  about          String   @db.Text
  wallet_address String   @unique
  role           Role     @default(USER)
  profile_pic    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  markets         Market[]
  trades          Trade[]
  token_allocated TokenAllocation[]
}

model Market {
  id                  Int      @id @default(autoincrement())
  description         String   @default("") @db.Text
  resolution_criteria String   @default("") @db.Text
  question            String
  expiry_date         DateTime
  image               String?

  contract_address    String   @default("")

  tags String[]

  status     EventStatus @default(ACTIVE)
  outcomeWon Int?

  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int

  trades Trade[]
  outcome   Outcome[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Outcome {
  id               Int               @id @default(autoincrement())
  outcome_title    String
  current_supply   Decimal           @default(0)
  total_liquidity  Decimal           @default(0)
  market           Market            @relation(fields: [marketID], references: [id])
  marketID         Int
  tokenAllocations TokenAllocation[]
  trades           Trade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TokenAllocation {
  id        Int     @id @default(autoincrement())
  amount    Decimal
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  outcome   Outcome @relation(fields: [outcomeId], references: [id])
  outcomeId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, outcomeId])
}

model Trade {
  id        Int    @id @default(autoincrement())
  unique_id String @default(uuid())

  order_type OrderType @default(BUY)
  order_size Decimal   @default(0)
  amount     Decimal   @default(0)

  afterPrice Decimal @default(0) // price shift after the trade is bought

  // Trade happened on
  market   Market? @relation(fields: [marketID], references: [id])
  marketID Int?

  outcome   Outcome? @relation(fields: [outcomeId], references: [id])
  outcomeId Int?

  // Trade done by
  user   User? @relation(fields: [userID], references: [id])
  userID Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VoteType {
  YES
  NO
}

enum Role {
  ADMIN
  USER
  VOTERS
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum EventStatus {
  ACTIVE
  EXPIRED
  CLOSED
}

enum EventOption {
  OPTION_A
  OPTION_B
}

enum OrderType {
  BUY
  SELL
}
